----------------------------------------------- Step 3 - Build the Boat Message Service channel --------------------------------------------------

This one is also fairly easy, as the code is given. This requires creating a "messageChannels" folder in your force-app\main\default 
folder and creating a "BoatMessageChannel.messageChannel-meta.xml" file with the following code:

<?xml version="1.0" encoding="UTF-8"?>
<LightningMessageChannel xmlns="https://soap.sforce.com/2006/04/metadata">
    <description>This is a sample Lightning Message Channel for the Lightning Web Components Superbadge.</description>
    <isExposed>true</isExposed>
    <lightningMessageFields>
        <description>This is the record Id that changed</description>
        <fieldName>recordId</fieldName>
    </lightningMessageFields>
    <masterLabel>BoatMessageChannel</masterLabel>
</LightningMessageChannel>


************** Remember to create a folder named "manifest" and a file inside the folder named "package.xml" with the following codes:

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Package xmlns="http://soap.sforce.com/2006/04/metadata">
    <types>
        <members>*</members>
        <name>ApexClass</name>
    </types>
    <types>
        <members>*</members>
        <name>ApexComponent</name>
    </types>
    <types>
        <members>*</members>
        <name>ApexPage</name>
    </types>
    <types>
        <members>*</members>
        <name>ApexTestSuite</name>
    </types>
    <types>
        <members>*</members>
        <name>ApexTrigger</name>
    </types>
    <types>
        <members>*</members>
        <name>AuraDefinitionBundle</name>
    </types>
    <types>
        <members>*</members>
        <name>LightningComponentBundle</name>
    </types>
    <types>
        <members>*</members>
        <name>StaticResource</name>
    </types>
    <types>
    <members>*</members>
        <name>LightningMessageChannel</name>
    </types>
    <version>55.0</version>
</Package>


------------------------------------------------ Step 4 - Get BoatDataService class ready for action -----------------------------------------------


 public with sharing class BoatDataService {

        @AuraEnabled(cacheable=true)
        public static List<Boat__c> getBoats(String boatTypeId) {
        
            List<Boat__c> allBoats = [SELECT Name, Description__c, Geolocation__c, Length__c, Picture__c, Price__c, Year_Built__c, BoatType__c, BoatType__r.Name, Contact__r.Name
                                      FROM Boat__c];

            if (String.isNotBlank(boatTypeId)){
                allBoats = [SELECT Name, Description__c, Geolocation__c, Length__c, Picture__c, Price__c, Year_Built__c, BoatType__c, BoatType__r.Name, Contact__r.Name
                            FROM Boat__c
                            WHERE BoatType__c =: boatTypeId 
                            WITH SECURITY_ENFORCED];
            }
            return allBoats;        
        }
        @AuraEnabled(cacheable=true)
        public static List<Boat__c> getSimilarBoats(Id boatId, String similarBy){
            List<Boat__c> allsimilarBoats = new List<Boat__c>();
            List<Boat__c> allParentBoats = [SELECT Id, Length__c, Price__c, BoatType__c, BoatType__r.Name
                                            FROM Boat__c
                                            WHERE Id =: boatId
                                            WITH SECURITY_ENFORCED];
            return allsimilarBoats;                                
        }
        @AuraEnabled(cacheable=true)
        public static List<BoatType__c> getBoatTypes(){
            return [SELECT Name, Id
                    FROM BoatType__c
                    WITH SECURITY_ENFORCED];
        }
        @AuraEnabled(cacheable=false)
        public static List<BoatReview__c> getAllReviews(Id boatId){
            return [SELECT Name, Id, Comment__c, Rating__c
                    FROM BoatReview__c
                    WHERE Boat__c =: boatId
                    WITH SECURITY_ENFORCED];
        }
        @AuraEnabled(cacheable=true)
        public static String getBoatsByLocation(String boatTypeId){
            String thisLocation = 'SELECT Name, Geolocation__c FROM Boat__c';

        if (String.isNotBlank(boatTypeId)){
            thisLocation = 'SELECT Name, Geolocation__c FROM Boat__c WHERE BoatType__c =: boatTypeId WITH SECURITY_ENFORCED';
        }
        return JSON.serialize(Database.query(thisLocation));                      
    }
}


--------------------------------------------------- Step 5 - Build the component boatSearchForm -----------------------------------------------

------------------------------------------------------ HTML -----------------------------------------------------

<template>

    <lightning-layout>
      <lightning-layout-item class="slds-align-middle">
        <lightning-combobox class="slds-align-middle" name="boatTypes" value={selectedBoatTypeId} options={searchOptions} onchange={handleSearchOptionChange}></lightning-combobox>
      </lightning-layout-item>
    </lightning-layout>

  </template>

------------------------------------------------------ JS -------------------------------------------------------

import { LightningElement, track, wire } from 'lwc';
import getBoatTypes from '@salesforce/apex/BoatDataService.getBoatTypes';

export default class BoatSearchForm extends LightningElement {

        selectedBoatTypeId = '';
    
        error = undefined;
        
        @track searchOptions;

        @wire(getBoatTypes)

        boatTypes({ error, data }) {
        if (data){
        this.searchOptions = data.map(type => {

            return { 
                    label:type.Name, 
                    value:type.Id
            }

        });
        this.searchOptions.unshift({ label: 'All Types', value: '' });
        
        }else if (error) {
        this.searchOptions = undefined;
        this.error = error;
        }
    }

    handleSearchOptionChange(event) {
        this.selectedBoatTypeId = event.detail.value;
        const searchEvent = new CustomEvent('search', { 
            detail: { boatTypeId: this.selectedBoatTypeId }    
        })
        this.dispatchEvent(searchEvent);
    }
}
